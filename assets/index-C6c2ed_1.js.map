{"version":3,"file":"index-C6c2ed_1.js","sources":["../../src/pages/trending-contracts/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Header from \"@components/header\";\nimport { DeployedContract, NetworkCluster } from \"@utils/constants\";\nimport ContractCard from \"@components/contract-card\";\nimport { capitalize } from \"@utils/utils\";\nimport { XBlock, XMasonry } from \"react-xmasonry\";\nimport { useFetchBlockchains } from \"@hooks/blockchain\";\nimport { useFetchPopularContracts } from \"@hooks/contract\";\nimport MainLayout from \"@components/main-layout\";\n\nconst TrendingContracts: React.FC = () => {\n  const { blockchains } = useFetchBlockchains();\n  const { trendingContracts } = useFetchPopularContracts();\n  const [displayedContracts, setDisplayedContracts] = useState<\n    DeployedContract[]\n  >([]);\n  const [selectedClusters, setSelectedClusters] = useState<string[]>([]);\n  const [searchedName, setSearchedName] = useState<string>();\n\n  useEffect(() => {\n    setDisplayedContracts(\n      trendingContracts.filter((contract) => {\n        if (\n          searchedName &&\n          !contract.template.name\n            .toLowerCase()\n            .includes(searchedName.toLowerCase())\n        )\n          return false;\n        for (const selectedNetworkCluster of selectedClusters)\n          if (\n            !blockchains\n              .filter((chain) =>\n                contract.addresses\n                  .map((address) => address.blockchainId)\n                  .includes(chain.id)\n              )\n              .map((chain) => chain.networkCluster.toString())\n              .includes(selectedNetworkCluster)\n          )\n            return false;\n        return true;\n      })\n    );\n  }, [trendingContracts, blockchains, selectedClusters, searchedName]);\n\n  return (\n    <MainLayout>\n      <div className=\"page\">\n        <Header\n          header=\"Popular Contracts\"\n          options={Object.values(NetworkCluster).map((cluster) => ({\n            value: cluster.toString(),\n            label: capitalize(cluster.toString()),\n          }))}\n          onSelected={setSelectedClusters}\n          onSearched={setSearchedName}\n          defaultSelectAll={false}\n        />\n        <div className=\"masonry-container\">\n          <XMasonry center={false} targetBlockWidth={300}>\n            {displayedContracts.map((contract) => (\n              <XBlock key={contract.template.id}>\n                <ContractCard contract={contract} />\n              </XBlock>\n            ))}\n          </XMasonry>\n        </div>\n      </div>\n    </MainLayout>\n  );\n};\n\nexport default TrendingContracts;\n"],"names":["TrendingContracts","blockchains","useFetchBlockchains","trendingContracts","useFetchPopularContracts","displayedContracts","setDisplayedContracts","useState","selectedClusters","setSelectedClusters","searchedName","setSearchedName","useEffect","contract","selectedNetworkCluster","chain","address","jsx","MainLayout","jsxs","Header","NetworkCluster","cluster","capitalize","XMasonry","XBlock","ContractCard"],"mappings":"0MAUA,MAAMA,EAA8B,IAAM,CACxC,KAAM,CAAE,YAAAC,CAAA,EAAgBC,EAAA,EAClB,CAAE,kBAAAC,CAAA,EAAsBC,EAAA,EACxB,CAACC,EAAoBC,CAAqB,EAAIC,EAAAA,SAElD,CAAA,CAAE,EACE,CAACC,EAAkBC,CAAmB,EAAIF,EAAAA,SAAmB,CAAA,CAAE,EAC/D,CAACG,EAAcC,CAAe,EAAIJ,WAAA,EAExCK,OAAAA,EAAAA,UAAU,IAAM,CACdN,EACEH,EAAkB,OAAQU,GAAa,CACrC,GACEH,GACA,CAACG,EAAS,SAAS,KAChB,cACA,SAASH,EAAa,aAAa,EAEtC,MAAO,GACT,UAAWI,KAA0BN,EACnC,GACE,CAACP,EACE,OAAQc,GACPF,EAAS,UACN,IAAKG,GAAYA,EAAQ,YAAY,EACrC,SAASD,EAAM,EAAE,CAAA,EAErB,IAAKA,GAAUA,EAAM,eAAe,SAAA,CAAU,EAC9C,SAASD,CAAsB,EAElC,MAAO,GACX,MAAO,EACT,CAAC,CAAA,CAEL,EAAG,CAACX,EAAmBF,EAAaO,EAAkBE,CAAY,CAAC,EAGjEO,EAAAA,IAACC,EAAA,CACC,SAAAC,EAAAA,KAAC,MAAA,CAAI,UAAU,OACb,SAAA,CAAAF,EAAAA,IAACG,EAAA,CACC,OAAO,oBACP,QAAS,OAAO,OAAOC,CAAc,EAAE,IAAKC,IAAa,CACvD,MAAOA,EAAQ,SAAA,EACf,MAAOC,EAAWD,EAAQ,SAAA,CAAU,CAAA,EACpC,EACF,WAAYb,EACZ,WAAYE,EACZ,iBAAkB,EAAA,CAAA,EAEpBM,EAAAA,IAAC,MAAA,CAAI,UAAU,oBACb,SAAAA,EAAAA,IAACO,EAAAA,UAAS,OAAQ,GAAO,iBAAkB,IACxC,SAAAnB,EAAmB,IAAKQ,GACvBI,EAAAA,IAACQ,EAAAA,OAAA,CACC,SAAAR,EAAAA,IAACS,EAAA,CAAa,SAAAb,CAAA,CAAoB,CAAA,EADvBA,EAAS,SAAS,EAE/B,CACD,CAAA,CACH,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,CAEJ"}